
#include<pthread.h>

#include <unistd.h>

using namespace std;

pthread_mutex_t m;

class monitor

{

    public:

        int s;      
        pthread_cond_t notZero;

        void wait(char id){

            if(s==0)

                {

                    printf("Process %c blocked\n", id);

                    pthread_cond_wait(&notZero,&m);

                }

            s=s-1;

        }

        void signal(){

            s=s+1;

            pthread_cond_signal(&notZero);

        }
	// constructor
        monitor(){

            s=1;

            pthread_cond_init(&notZero,NULL);

        

        }

};

monitor obj;

void *Thread1(void *arg)

{

    char *k=(char *)arg;

    char id=*k;

    while(1)

    {   

        //NCS

        obj.wait(id);

        //CS

        printf("\nprocess A is in critical section\n");

        usleep(1000000);

        //CS

        printf("\nprocess A out of critical section\n");

        obj.signal();

        usleep(1000000);

    }

    
    	//   pthread_exit(NULL);

}

void *Thread2(void *arg)

{

    char *k=(char *)arg;

    char id=*k;

    while(1)

    {

        //NCS

        obj.wait(id);

        

        //CS

        printf("\nprocess B is in critical section\n");

        usleep(1000000);

        //NCS

        printf("\nprocess B out of critical section\n");

        obj.signal();

        usleep(1000000);


    }
   
    	 //pthread_exit(NULL);
}

 

int main()

{

    pthread_t tid1, tid2;

    char p='A', q='B';

    pthread_mutex_init(&m,NULL);

    pthread_create(&tid1, NULL, &Thread1, &p);

    pthread_create(&tid2, NULL, &Thread2, &q);
    pthread_exit(NULL);

    pthread_mutex_destroy(&m);

    return 0;

}
	
