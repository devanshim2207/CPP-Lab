//producer consumer with bounded buffer using semaphore
#include<pthread.h>
#include<semaphore.h>
#include <stdlib.h>
#include <stdio.h>
#define buffersize 5

int myrand(int n){
 
    time_t t; 
    srand((unsigned)time(&t)); 
    return (rand() % n + 1); 
} 

sem_t empty;
sem_t full;
int in=0,out=0, buffer[buffersize];
pthread_mutex_t mutex;

void *producer(){
	int item;
	//for(int i=0;i<buffersize;i++){
	while(1){
		item = myrand(50);
		sem_wait(&empty);
		pthread_mutex_lock(&mutex);
		buffer[in] = item;
		printf("Produced item no %d = %d\n",in,buffer[in]);
		sleep(1);
		in = (in+1)%buffersize;
		pthread_mutex_unlock(&mutex);
		sem_post(&full);
		}
	pthread_exit(NULL);
}
void *consumer(){
	int item;
	//for(int i=0;i<buffersize;i++){
	while(1){

		sem_wait(&full);
		pthread_mutex_lock(&mutex);
		int item = buffer[out]; buffer[out]=-1;
		printf("consumed item no %d = %d\n",out,item);
		sleep(1);
		out = (out+1)%buffersize;
		pthread_mutex_unlock(&mutex);
		sem_post(&empty);
		}
	pthread_exit(NULL);
}
int main(){
	pthread_t pro,con;
	pthread_mutex_init(&mutex, NULL);
	sem_init(&empty,0,buffersize);
	sem_init(&full,0,0);
	pthread_create(&pro,NULL,producer,NULL);
	pthread_create(&con,NULL,consumer,NULL);
	pthread_join(pro,NULL);
	pthread_join(con,NULL);
	pthread_mutex_destroy(&mutex);
	sem_destroy(&empty);
	sem_destroy(&full);
	return 0;
}
